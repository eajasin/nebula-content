// alphabetPosition = (text) => {
//   let textAsArray = text.split(" ")
//   let alphabet = ["a", "b", "c"]
//   for(i = 0; i < alphabet.length; i++){
//     if alphabet[i] === 
  
//   return text.indexOf[alphabet[i]]
// }
// }
// let strin = "We wish you a Merry Christmas."
// const disemvowel = (str) => {
//   let vowels = "aeiou"
//   let newStr = ""
  
//   for(let i = 0; i < str.length; i++){
//       if(!vowels.includes(str[i].toLowerCase())){
               
//   } 
//   }  return newStr += str[i]  
// }

// console.log(disemvowel(strin))

// const disemvowel = (str) => {
//   return str.replace(/[aeiouAEIOU]/g, '');

// } candu

// console.log(disemvowel(strin))
// function median (array){
//   let indexOfMidNum = array.length / 2
//   if (array.length % 2 === 0){
//       return (array[indexOfMidNum] + array[indexOfMidNum - 1]) / 2
//   } else {
//       return (array[indexOfMidNum])
//   }
// }
//   console.log(median(footballTeamScores))

// let word = "candyi"
// const getMiddle = (s) => {
//   let index = s.length / 2
//        if (s.length % 2 === 0 ){
//           return s.charAt(index - 1) + s.charAt(index) 
                  
//       } else {
//   } return s.charAt(index)


// }

// console.log(getMiddle(word))

// let array = [-1, 2, 4, -9]

// const positiveSum = (arr) => {
//   let sum = 0 //arr => sum of nums
//   for(let i = 0; i < arr.length; i++){//loop through all nums in arr
//     if(arr[i] > 0) {
//       sum += arr[i] //consider and add only pos nums
//   } 
//   } return sum 
// }
// console.log(positiveSum(array))

// let string = "fjskhu"

// const accum = (s) => { //input s; convert to arr; output s  
//   let lowerString = s.toLowerCase() //make all letters lower-case  
//   let empArray = []	// push letters into empty array 
//     for(let i = 0; i < lowerString.length; i++){//iterate through each letter in lowercase
//     let repPart = lowerString[i].repeat(i+1) // repeat lowercase string by its index plus 1
//     let capString = repPart[0].toUpperCase() + repPart.slice(1)//capitalize 1st letter and adding on repeated part wit the cap letter sliced offf
//          empArray.push(capString)// add string with upper case and repeated part into empty array
//     } 
//     return empArray.join('-')//insert '-' between each capstring
//   }

// console.log(accum(string))

// const accum = (s) => {
//   let lowerString = s.toLowerCase()
//   for(i = 0; i < lowerString.length; i++){
//     let currLett = lowerString[i]
//     for(j = 0; j < ; j++){

//     }
//   }
  
// }



//Given a non-negative integer, 3 for example, return a string with a murmur: "1 sheep...2 sheep...3 sheep...". Input will always be valid, i.e. no negative integers.

// let number = 3
     
// const countSheep = (num) => {
//   let sleepString = ""
//     for(let i = 1; i <= num; i++){ //iterate through all numbers up to num, starting at 1
//       sleepString += `${i} sheep...` //input all numbers into string, adding by 1 digit increments
//     }
//         return sleepString// add "..." alongside each number
//   } 

// //need to increase 
// console.log(countSheep(number))
  
//Take an array and remove every second element from the array. Always keep the first element and start removing with the next element.
/*
1) input array, output array
2) rermove second element
3) push the second-element-less element into a new array
*/

// let array = ["school", "shoes", "car", "candy", "cup", "church"]

// const removeEveryOther = (arr) => {
//   let newArr = []
//   for(let i = 0; i < arr.length; i+=2){
//       newArr.push(arr[i])
//     } return newArr
//   } 

// console.log(removeEveryOther(array))

/*array => number

return using min.max methods
*/

// let array = [2, 6, 90, 59, -3]

// const min = (list) => {
    
//     return Math.min(...list)
// }

// const max = (list) => {
    
//     return Math.max(...list)
// }

// console.log(max(array))

/*  -INPUT POSITION AND NUMBER
    - multiply rroll by two
    -add this figure position
    
*/

// const move = (position, roll) => {
//   return (roll * 2) + position
// }
// console.log(move(2,5))

// string=> string
//do reverse loop (i--, i > 0, start a)
//return string backwards
//
//let string = "bootcamp"

// const solution = (str) => {
//   let newStr = ""
//   for(let i = str.length-1; i >= 0; i--){
//       newStr += str[i]
//   } 
//     return newStr
// } 

// console.log(solution(string))

let str = "gdgjd dgjkdjg djgkdj"

// const noSpace = (x) => { //string => string
//   let newStr = ""  //placeholder string
//   for(i = 0; i < x.length; i++){ //loop through string 
//     if(x[i] !== " "){ //identifies the spaces
//      newStr += x[i]} //add non-spaces to new string
//   }
//   return newStr
// }  
  
// console.log(noSpace(str))
// let string = "bootcamp"

// const removeChar = (str) => { //string => string
//   let noFirstAndLast = str.slice(1, -1)//need to identify indices of first str[1] and last char str[-1] in string and extract their range
//      return noFirstAndLast 
//     }                                
  
// console.log(removeChar(string))   

// console.log(removeChar(string))
//   //return string with first and last index removed

// let array = ["hay", "junk", "hay", "hay", "moreJunk", "needle", "randomJunk"]

// const findNeedle = (haystack) => {  //array => string
//                                     //iterate through array to find index of element "needle"
//    for(let i = 0; i < haystack.length; i++){
//     if(haystack[i] === "needle"){
//       return "found the needle at position" +" "+ i
//     }
//    }
//   //output string containing index of needle
// }

//YOU ONLY NEED ONE - BEGINNER

//array and value => true/false

// let array = [1, 2, 3]
// let value = 5
// const check = (a, x) => {
//   if(a.includes(x)){return true}
//   return false
// } 

//  console.log(check(array, value))

  
  //Square(n) Sum

// let array = [2, 1, 3]

//   const squareSum = (numbers) => {  //array of integers => integer
//     let sumOfNumbers = 0  //create placeholder for final return
//     for(let i = 0; i < numbers.length; i++){ //iterate through array
//        sumOfNumbers += Math.pow(numbers[i], 2)                //square each number and add the squares
//     }  
//    return sumOfNumbers                       
// } 

// console.log(squareSum(array))                                      

//Anagram Detection
//test (anagram or not) and oringal work (strings) => "true"/"false" if anagram i/is not anagram of each other (boolean)
//convert to array using "split"
//lowercase all letters and alphabatize (sort - an array method)
//convert arrays back into strings using "join" and compare them to each other (joined back to string because not checking the actual values of array)not primitive vAlue so checking references in memory); 
//compare strings because it is primitive, non-primitives have differnet memory references
//return true/false

// let anagram = "foefet"
// let word = "toffee"


// const isAnagram = (test, original) => {
//   let lTest = test.toLowerCase().split("").sort().join("")
//   let lOrig = original.toLowerCase().split("").sort().join("")
//   // let testArray = lTest.split("")
//   // let origArray = lOrig.split("")
//   // let sortedTest = testArray.sort()
//   // let sortedOrig = origArray.sort()
  
  
// // console.log(sortedTest)
// // console.log(sortedOrig)
//   // if(sortedTest.join("") === sortedOrig.join("")) {
//   //   if(lTest === lOrig){
//   // return true
//   // } return false
//   return lTest === lOrig
// }

// console.log(isAnagram(anagram, word))

// Isogram
// string ==> boolean
// test str to see if has any repeating chracters in it; if it does, true, if not false
// lowercase all letters
// iterate through str twice and compare the two for same characters
// return false if letters do not equal

// let string = "owll"

// const isIsogram = (str) => {
//   let lStr = str.toLowerCase()
//   for(let i = 0; i < lStr.length; i++){
//     for(let j = 0; j < lStr.length; j++){
//     if(i !== j){ //check if equal only when they are not on the same index; could also do j=i+1 to circumcent comparing the same characters
//       if(lStr[i] == lStr[j]){
//       return false
//   } 
// } 
// }
//   }
// return true
// }
// console.log(isIsogram(string))

//for(let char of str) - when indices not relevant



// //Friend or Foe (7) - if name has 4 characters they are a friend; input = list of names and output = list of name with 4 characters
// let list = ["alvin", "simon", "theo"]

// const friend = (friends) => {
//   let fArray = [] //placeholder array for list of friends with 4 chars
    
//     for(let i = 0; i < friends.length; i++){             //for loop will iterate through each name
//        if(friends[i].length === 4){               //compare length (# of indices) of each each name to 4
//        fArray.push(friends[i])                    //adds only 4 letter names into new list (array)
//        } 
//    }
//    return fArray      //return final array
// }  
// console.log(friend(list))


//Categorize New Member (7) - input is an array of integer pairs (one for age and one for the person's handicap); output = array of string values of "Open" or "Senior"
//seniors are 55+ and have a handicap greater than 7 (standing range of -2 to 26)
//create placeholder array for return
//two for loop to iterate through array, and place condition that if index[0] is 55+ and index[1] > 7, return senior

// let list = [[55, 6], [100, 7], [45, 8]] //should return [Open, Senior, Open]

// const openOrSenior = (data) => {



// }

//Is this a triangle

//input 3 integer values, and determine if third side can be built with the sides of a given length
//output is a boolean
//sum of two sides has to be larger than the third one
// if statement and use logic operator 

// let side1 = 2;
// let side2 = 3;
// let side3 = 4

// const isTriangle = (a,b,c) => {

// if(a + b > c && a + c > b && b + c > a) {
//   return true
// } 
//   return false
// }


// console.log(isTriangle(side1, side2, side3))



//find the stray number
//input us an arrary of numbers with an odd length
//output is number that is not equal to the otther numbers
//create placeholder for the odd integer out

let array = [17, 17, 3, 17, 17, 17, 17]


const stray = (numbers) => {


let sortedArray = numbers.sort((a,b) => a-b)

if(sortedArray[0] ===sortedArray[1]){
  return sortedArray[sortedArray.length-1]
} else {
  return sortedArray[0]
}
}
//console.log(sortedArray)
// let firstNum = sortedArray[0]
// let secondNum = sortedArray[1]
// let thirdNum = sortedArray[2]



console.log(stray(array))